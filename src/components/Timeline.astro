---
import "@/styles/components/timeline.css";
import { type TimelineProps } from "@/types";
import TimelineItem from "@/components/TimelineItem.astro";
import { getLangFromUrl, useTranslatedPath } from "@/utils/i18n";

const { timelineItems } = Astro.props as {
  timelineItems: TimelineProps[];
};

const lang = getLangFromUrl(Astro.url);
const translatePath = useTranslatedPath(lang);
---

<div class="timeline-container">
  {
    timelineItems.map((timeline) =>
      timeline.url ? (
        <a
          href={translatePath(timeline.url)}
          class="timeline-link"
          tabindex="-1"
        >
          <TimelineItem
            title={timeline.title}
            subtitle={timeline.subtitle}
            description={timeline.description}
            points={timeline.points}
            url={timeline.url}
          />
        </a>
      ) : (
        <TimelineItem
          title={timeline.title}
          subtitle={timeline.subtitle}
          description={timeline.description}
          points={timeline.points}
          url={timeline.url}
        />
      ),
    )
  }
</div>

<script>
  const initializeTimeline = () => {
    const containerEl = document.querySelector(".timeline-container");
    if (!containerEl) return;

    const toggleItem = (target: HTMLElement) => {
      const itemEl = target.closest(".timeline-item");
      const descriptionEl = itemEl?.querySelector(".timeline-description");
      descriptionEl?.classList.toggle("visible");
    };

    const handleToggle = (e: Event) => {
      const target = e.target;
      if (!(target instanceof HTMLElement)) return;
      if (e instanceof KeyboardEvent && e.key !== "Enter") return;

      toggleItem(target);
    };

    containerEl.addEventListener("click", handleToggle);
    containerEl.addEventListener("keydown", handleToggle);
  };
  initializeTimeline();
</script>
