---
import { Image } from "astro:assets";
import profileImage from "@/assets/images/profile.jpg";
import "@/styles/components/navigation.css";
import { NAVIGATION_ITEMS as navItems } from "@/data/navigation";
import GithubIcon from "@/assets/svg/github.svg";
import LinkedInIcon from "@/assets/svg/linkedin.svg";
import ExternalLinkIcon from "@/assets/svg/external-link.svg";
import EmailIcon from "@/assets/svg/email.svg";
import HamburgerIcon from "@/assets/svg/hamburger.svg";
import MoonIcon from "@/assets/svg/moon.svg";
import SunIcon from "@/assets/svg/sun.svg";
import GlobeIcon from "@/assets/svg/globe.svg";
import { isActive } from "@/utils/navigation";
import { languages, defaultLang } from "@/i18n/ui";
import { getLangFromUrl, useTranslatedPath } from "@/utils/i18n";

const currentPath = Astro.url.pathname.replace(/^\/[a-z]{2}(?=\/|$)/, "");
const currentLang = getLangFromUrl(Astro.url);
const translatePath = useTranslatedPath(currentLang);
---

<nav class="nav" role="navigation" aria-label="Main navigation">
  <div class="nav-container">
    <a href={translatePath("/")} class="nav-profile">
      <Image
        src={profileImage}
        alt="Profile picture of Yanuar Wanda"
        class="nav-profile-image"
        loading="lazy"
        width="64"
        height="64"
      />
    </a>

    <div class="nav-text">
      <h1 class="nav-title">Yanuar Wanda</h1>
      <h2 class="nav-subtitle">Web Developer</h2>
    </div>

    <div class="nav-media">
      <a
        href="https://github.com/YanuarWanda"
        target="_blank"
        rel="noopener noreferrer"
        class="button button-secondary"
        aria-label="Visit Yanuar Wanda's GitHub profile"
      >
        <GithubIcon />
      </a>
      <a
        href="https://www.linkedin.com/in/yanuar-wanda/"
        target="_blank"
        rel="noopener noreferrer"
        class="button button-secondary"
        aria-label="Visit Yanuar Wanda's LinkedIn profile"
      >
        <LinkedInIcon />
      </a>
      <a
        href="mailto:yanuar.wanda2@gmail.com"
        target="_blank"
        rel="noopener noreferrer"
        class="button button-secondary"
        aria-label="Send an email to Yanuar Wanda"
      >
        <EmailIcon />
      </a>
    </div>

    <div class="nav-setting">
      <button
        class="nav-i18n"
        aria-expanded="false"
        aria-label="Toggle language menu"
      >
        <div class="nav-i18n-icon">
          <GlobeIcon />
        </div>
        <div class="nav-i18n-text">{currentLang}</div>
        <ul role="list" class="nav-i18n-list">
          {
            Object.entries(languages).map(([lang, label]) => (
              <li role="listitem" class="nav-i18n-item">
                <a
                  href={
                    lang === defaultLang
                      ? currentPath
                      : `/${lang}${currentPath}`
                  }
                  class={`nav-i18n-link ${lang === currentLang ? "active" : ""}`}
                  tabindex="-1"
                >
                  {label}
                </a>
              </li>
            ))
          }
        </ul>
      </button>

      <button class="nav-theme-container" aria-label="Toggle dark mode">
        <div class="nav-theme-switcher">
          <div class="sun-icon"><SunIcon /></div>
          <div class="moon-icon"><MoonIcon /></div>
        </div>
      </button>
    </div>

    <button
      class="nav-hamburger"
      aria-expanded="false"
      aria-label="Toggle navigation menu"
    >
      <HamburgerIcon />
    </button>
  </div>

  <ul role="list" class="nav-i18n-option-container">
    {
      Object.entries(languages).map(([lang, label]) => (
        <li role="listitem" class="nav-i18n-option">
          <a
            href={lang === defaultLang ? currentPath : `/${lang}${currentPath}`}
            class={`nav-i18n-link ${lang === currentLang ? "active" : ""}`}
            tabindex="-1"
          >
            {label}
          </a>
        </li>
      ))
    }
  </ul>

  <ul role="list" class="nav-list">
    {
      navItems.map((item) => (
        <li role="listitem" class="nav-item">
          <a
            href={item.toNewTab ? item.href : translatePath(item.href)}
            class={`nav-link ${isActive(item.href, currentPath) ? "active" : ""}`}
            aria-current={isActive(item.href, currentPath) ? "page" : undefined}
            target={item.toNewTab ? "_blank" : ""}
          >
            <div class="nav-item-text">{item.text[currentLang]}</div>
            {item.toNewTab && <ExternalLinkIcon class="nav-item-icon" />}
          </a>
        </li>
      ))
    }
  </ul>
</nav>

<script is:inline>
  const theme = (() => {
    const localStorageTheme = localStorage?.getItem("theme") ?? "";
    if (["dark", "light"].includes(localStorageTheme)) {
      return localStorageTheme;
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  })();

  if (theme === "light") {
    document.documentElement.classList.remove("dark");
    document.documentElement.classList.add("light");
  } else {
    document.documentElement.classList.remove("light");
    document.documentElement.classList.add("dark");
  }

  window.localStorage.setItem("theme", theme);
</script>

<script>
  const MOBILE_WIDTH_THRESHOLD = 577;

  const toggleTabindexList = (
    list: Element | null,
    showTabindex: boolean,
    focus = false,
  ) => {
    if (!list) return;

    const listItems = list.querySelectorAll("a");
    listItems.forEach((item, index) => {
      item.setAttribute("tabindex", showTabindex ? "0" : "-1");
      if (showTabindex && focus && index === 0) {
        item.focus();
      }
    });
  };

  const toggleList = (
    button: Element | null,
    list: Element | null,
    show: boolean | undefined = undefined,
    focus = false,
  ) => {
    if (!button || !list) return;

    const isExpanded =
      typeof show === "boolean" ? show : !list.classList.contains("nav-open");
    list.classList.toggle("nav-open", isExpanded);
    button.setAttribute("aria-expanded", isExpanded.toString());

    toggleTabindexList(list, isExpanded, focus);
  };

  // Hamburger
  const initializeHamburger = () => {
    const btn = document.querySelector(".nav-hamburger");
    const list = document.querySelector(".nav-list");

    btn?.addEventListener("click", () => {
      toggleList(btn, list);
    });

    const onResize = () => {
      toggleTabindexList(list, !(window.innerWidth <= MOBILE_WIDTH_THRESHOLD));
    };
    onResize();

    window.addEventListener("resize", () => {
      onResize();
    });

    screen.orientation.addEventListener("change", () => {
      onResize();
    });

    window.addEventListener("click", (event: MouseEvent) => {
      if (
        !btn?.contains(event.target as Node) &&
        !list?.contains(event.target as Node) &&
        list?.classList.contains("nav-open")
      ) {
        toggleList(btn, list, false);
      }
    });

    document.addEventListener("focusin", (e) => {
      if (window.innerWidth <= MOBILE_WIDTH_THRESHOLD) {
        const target = e.target;

        if (!list?.contains(target as Node) && target !== btn) {
          toggleList(btn, list, false);
        }
      }
    });
  };
  initializeHamburger();

  // i18n
  const initializeI18n = () => {
    const btn = document.querySelector(".nav-i18n");
    const listMobile = document.querySelector(".nav-i18n-option-container");
    const listDesktop = document.querySelector(".nav-i18n-list");

    const onClickMobile = () => {
      toggleList(btn, listMobile);
    };
    const onClickDesktop = () => {
      toggleList(btn, listDesktop);
    };

    let onClick = onClickMobile;
    const onResize = () => {
      onClick =
        window.innerWidth <= MOBILE_WIDTH_THRESHOLD
          ? onClickMobile
          : onClickDesktop;
    };
    onResize();

    btn?.addEventListener("click", () => {
      onClick();
    });

    btn?.addEventListener("keydown", (e) => {
      if (
        window.innerWidth <= MOBILE_WIDTH_THRESHOLD &&
        e instanceof KeyboardEvent &&
        e.key === "Enter"
      ) {
        e.preventDefault();
        toggleList(btn, listMobile, undefined, true);
      }
    });

    window.addEventListener("resize", () => {
      onResize();
    });

    screen.orientation.addEventListener("change", () => {
      onResize();
    });

    window.addEventListener("click", (event: MouseEvent) => {
      if (
        !btn?.contains(event.target as Node) &&
        !listMobile?.contains(event.target as Node) &&
        !listDesktop?.contains(event.target as Node) &&
        (listMobile?.classList.contains("nav-open") ||
          listDesktop?.classList.contains("nav-open"))
      ) {
        toggleList(btn, listMobile, false);
        toggleList(btn, listDesktop, false);
      }
    });

    document.addEventListener("focusin", (e) => {
      const target = e.target;

      if (!listMobile?.contains(target as Node) && target !== btn) {
        toggleList(btn, listMobile, false);
      }

      if (!listDesktop?.contains(target as Node) && target !== btn) {
        toggleList(btn, listDesktop, false);
      }
    });
  };
  initializeI18n();

  // Theme Switcher
  const initializeThemeSwitcher = () => {
    const btn = document.querySelector(".nav-theme-container");
    const onClick = () => {
      const element = document.documentElement;
      element.classList.toggle("dark");
      element.classList.toggle("light");

      const isDark = element.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    };

    btn?.addEventListener("click", onClick);
  };
  initializeThemeSwitcher();
</script>
